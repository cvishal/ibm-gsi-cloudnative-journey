{"componentChunkName":"component---src-pages-contributing-index-mdx","path":"/contributing/","result":{"pageContext":{"frontmatter":{"title":"Contributing"},"relativePagePath":"/contributing/index.mdx","titleType":"page","MdxNode":{"id":"99408d40-4d75-5e38-9e3b-63a7dbd14e35","children":[],"parent":"44d07270-6876-5a55-a4ba-146b06ed53b0","internal":{"content":"---\ntitle: Contributing\n---\n\n## Roles and responsibilities\n\n### Consumers\n\n_Consumers_ are members of the community who are applying assets to their development projects. Anyone who wants to apply any of the assets can be a user. We encourage consumers to participate as evangelists and contributors as well.\n\n### Evangelists\n\n_Evangelists_ are members of the community who help others become consumers of the assets. They do so by:\n- Advertising the assets and encouraging others to use them\n- Supporting new consumers and answering questions, such as on Slack (IBM internal)\n- Reporting bugs or missing features through GitHub issues\n\n### Contributors\n\n_Contributors_ are members of the community who help maintain, improve, and expand the assets. In addition to using and evangelizing the assets, they make the assets better by:\n- Resolving issues in GitHub to fix bugs, add features, and improve documentation\n- Submitting changes as GitHub pull requests\n\n### Maintainers\n\n_Project maintainers_ (aka maintainers) are owners of the project who are committed to the success of the assets in that project. Each project has a team of maintainers, and each team has a lead. In addition to their participation as contributors, maintainers have privileges to:\n- Label, close, and manage GitHub issues\n- Close and merge GitHub pull requests\n- Nominate and vote on new maintainers\n\n## Types of teams\n\n### Core team\n\nCore team members are IBM employees responsible for the leadership and strategic direction of the set of Catalyst projects as a whole. The core team also directs how the Catalyst strategy will evolve with IBM Cloud product decisions. Core team responsibilities include:\n\n- Actively engaging with the projects' communities\n- Setting overall direction and vision\n- Setting priorities and release schedule\n- Focusing on broad, cross-cutting concerns\n- Spinning up or shutting down project teams\n\nThe core team will operate the technical steering committee.\n\n## Governance\n\n### Support\n\nHave questions? Found a bug? Learn where to go and what to do by visiting the [Support page](/help/support).\n\n## Contributing\n\n## Requirements\n\nSet up your SSH Key GitHub account and install node.js 11 or higher.\n\n- [Generating SSH Keys - GitHub](https://help.github.com/articles/generating-ssh-keys/)\n- [`nvm` (Node Version Manager)](https://github.com/creationix/nvm) to use the\n  `Node 6`.\n\n\n### Make a pull request\n\n**Note:** Before you make a pull request,\n[search](https://github.com/IBM/carbon-components/issues) the issues to see if a\nsimilar issue has already been submitted. If a similar issue has been submitted,\nassign yourself or ask to be assigned to the issue by posting a comment. If the\nissue does not exist, create a new issue.\n\nWhen you're at a good stopping place and you're ready for feedback from other\ncontributors and maintainers, **push your commits to your fork**:\n\n#### Commit tip\n\n> **Writing commit messages**\n>\n> - `<type>` indicates the type of commit that's being made. This can be:\n>   `feat`, `fix`, `perf`, `docs`, `chore`, `style`, `refactor`\n> - `<scope>` The scope could be anything specifying place of the commit change\n>   or the thing(s) that changed.\n>\n> **Commit message format:**\n\n```\n<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\n_Do not submit pull requests from the `master` branch of your fork._\n\n```\ngit checkout -b { YOUR_BRANCH_NAME }\ngit add .\ngit commit -m \"fix(table): IE11 positioning error\" -m \"Fixes #34\"\n```\n\n- [Close a commit via commit message](https://help.github.com/articles/closing-issues-via-commit-messages/)\n\n```\ngit push origin { YOUR_BRANCH_NAME }\n```\n\nIn your browser, navigate to\n[IBM/carbon-components](https://github.com/IBM/carbon-components) and click the\nbutton that reads `Compare & pull request`\n\n> **Is it a Breaking Change?**\n\n> We want to respect semver. It's important to discern whether your pull request\n> contains breaking changes or not. Sometimes, renaming or removing things in\n> the code can result in breaking changes.\n\n> Here are some examples of breaking changes... changing, renaming or removing\n> any of the following:\n>\n> - HTML attributes\n> - Folders or Files\n> - Any SCSS `@mixin`, `$variable` or `function`\n> - Any JS `function` or `class`\n\n> We also practice **graceful deprecation** when something is slated to be\n> removed -- we mark it as deprecated in the current version and remove it in\n> the next major version.\n\nBefore you create a pull request, change the base branch depending on what kind\nof change you're submitting.\n\n- Pull requests with **non-breaking changes** like patches and minor updates use\n  the `master` as the base branch.\n- Pull requests with **breaking changes** use the latest `major version number`\n  branch as the base branch (i.e. `7.0.0` or whatever the next major version\n  is).\n\nWrite a title and description then click `Create pull request`\n\n- [How to write the perfect pull request](https://github.com/blog/1943-how-to-write-the-perfect-pull-request)\n\n### Updating a pull request\n\nStay up to date with the activity in your pull request. Maintainers from the\nDesign System team will be reviewing your work and making comments, asking\nquestions and suggesting changes to be made before they merge your code.\n\n:tada: You no longer need to squash commits :tada:\n\nWhen you need to make a change, add, commit and push to your branch normally.\n\nOnce all revisions to your pull request are complete, someone from Design\nSystems will squash and merge your commits for you.\n","type":"Mdx","contentDigest":"ccded4b4f72a62783c5a24492926fb63","counter":833,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Contributing"},"exports":{},"rawBody":"---\ntitle: Contributing\n---\n\n## Roles and responsibilities\n\n### Consumers\n\n_Consumers_ are members of the community who are applying assets to their development projects. Anyone who wants to apply any of the assets can be a user. We encourage consumers to participate as evangelists and contributors as well.\n\n### Evangelists\n\n_Evangelists_ are members of the community who help others become consumers of the assets. They do so by:\n- Advertising the assets and encouraging others to use them\n- Supporting new consumers and answering questions, such as on Slack (IBM internal)\n- Reporting bugs or missing features through GitHub issues\n\n### Contributors\n\n_Contributors_ are members of the community who help maintain, improve, and expand the assets. In addition to using and evangelizing the assets, they make the assets better by:\n- Resolving issues in GitHub to fix bugs, add features, and improve documentation\n- Submitting changes as GitHub pull requests\n\n### Maintainers\n\n_Project maintainers_ (aka maintainers) are owners of the project who are committed to the success of the assets in that project. Each project has a team of maintainers, and each team has a lead. In addition to their participation as contributors, maintainers have privileges to:\n- Label, close, and manage GitHub issues\n- Close and merge GitHub pull requests\n- Nominate and vote on new maintainers\n\n## Types of teams\n\n### Core team\n\nCore team members are IBM employees responsible for the leadership and strategic direction of the set of Catalyst projects as a whole. The core team also directs how the Catalyst strategy will evolve with IBM Cloud product decisions. Core team responsibilities include:\n\n- Actively engaging with the projects' communities\n- Setting overall direction and vision\n- Setting priorities and release schedule\n- Focusing on broad, cross-cutting concerns\n- Spinning up or shutting down project teams\n\nThe core team will operate the technical steering committee.\n\n## Governance\n\n### Support\n\nHave questions? Found a bug? Learn where to go and what to do by visiting the [Support page](/help/support).\n\n## Contributing\n\n## Requirements\n\nSet up your SSH Key GitHub account and install node.js 11 or higher.\n\n- [Generating SSH Keys - GitHub](https://help.github.com/articles/generating-ssh-keys/)\n- [`nvm` (Node Version Manager)](https://github.com/creationix/nvm) to use the\n  `Node 6`.\n\n\n### Make a pull request\n\n**Note:** Before you make a pull request,\n[search](https://github.com/IBM/carbon-components/issues) the issues to see if a\nsimilar issue has already been submitted. If a similar issue has been submitted,\nassign yourself or ask to be assigned to the issue by posting a comment. If the\nissue does not exist, create a new issue.\n\nWhen you're at a good stopping place and you're ready for feedback from other\ncontributors and maintainers, **push your commits to your fork**:\n\n#### Commit tip\n\n> **Writing commit messages**\n>\n> - `<type>` indicates the type of commit that's being made. This can be:\n>   `feat`, `fix`, `perf`, `docs`, `chore`, `style`, `refactor`\n> - `<scope>` The scope could be anything specifying place of the commit change\n>   or the thing(s) that changed.\n>\n> **Commit message format:**\n\n```\n<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\n_Do not submit pull requests from the `master` branch of your fork._\n\n```\ngit checkout -b { YOUR_BRANCH_NAME }\ngit add .\ngit commit -m \"fix(table): IE11 positioning error\" -m \"Fixes #34\"\n```\n\n- [Close a commit via commit message](https://help.github.com/articles/closing-issues-via-commit-messages/)\n\n```\ngit push origin { YOUR_BRANCH_NAME }\n```\n\nIn your browser, navigate to\n[IBM/carbon-components](https://github.com/IBM/carbon-components) and click the\nbutton that reads `Compare & pull request`\n\n> **Is it a Breaking Change?**\n\n> We want to respect semver. It's important to discern whether your pull request\n> contains breaking changes or not. Sometimes, renaming or removing things in\n> the code can result in breaking changes.\n\n> Here are some examples of breaking changes... changing, renaming or removing\n> any of the following:\n>\n> - HTML attributes\n> - Folders or Files\n> - Any SCSS `@mixin`, `$variable` or `function`\n> - Any JS `function` or `class`\n\n> We also practice **graceful deprecation** when something is slated to be\n> removed -- we mark it as deprecated in the current version and remove it in\n> the next major version.\n\nBefore you create a pull request, change the base branch depending on what kind\nof change you're submitting.\n\n- Pull requests with **non-breaking changes** like patches and minor updates use\n  the `master` as the base branch.\n- Pull requests with **breaking changes** use the latest `major version number`\n  branch as the base branch (i.e. `7.0.0` or whatever the next major version\n  is).\n\nWrite a title and description then click `Create pull request`\n\n- [How to write the perfect pull request](https://github.com/blog/1943-how-to-write-the-perfect-pull-request)\n\n### Updating a pull request\n\nStay up to date with the activity in your pull request. Maintainers from the\nDesign System team will be reviewing your work and making comments, asking\nquestions and suggesting changes to be made before they merge your code.\n\n:tada: You no longer need to squash commits :tada:\n\nWhen you need to make a change, add, commit and push to your branch normally.\n\nOnce all revisions to your pull request are complete, someone from Design\nSystems will squash and merge your commits for you.\n","fileAbsolutePath":"/Users/vishal/Cloud2020/CNTK/ibm-gsi-cloudnative-journey/src/pages/contributing/index.mdx"}}}}