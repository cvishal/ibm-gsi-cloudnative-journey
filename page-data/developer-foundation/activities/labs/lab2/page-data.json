{"componentChunkName":"component---src-pages-developer-foundation-activities-labs-lab-2-index-mdx","path":"/developer-foundation/activities/labs/lab2/","result":{"pageContext":{"frontmatter":{"title":"Kubernetes Lab 2 - Pod Configuration"},"relativePagePath":"/developer-foundation/activities/labs/lab2/index.mdx","titleType":"page","MdxNode":{"id":"17905ad0-be86-546a-a584-b405c9a33adc","children":[],"parent":"5e1c7216-9978-52f8-b096-8300cfe29e84","internal":{"content":"---\ntitle: Kubernetes Lab 2 - Pod Configuration\n---\n\n## Problem\n\n- Create a pod definition named `yoda-service-pod.yml`, and then create a pod in the cluster using this definition to make sure it works.\n\nThe specifications are as follows:\n\n - The current image for the container is `bitnami/nginx`. You do not need a custom command or args.\n - There is some configuration data the container will need:\n    - `yoda.baby.power=100000000`\n    - `yoda.strength=10`\n - It will expect to find this data in a file at `/etc/yoda-service/yoda.cfg`. Store the configuration data in a ConfigMap called `yoda-service-config` and provide it to the container as a mounted volume.\n - The container should expect to use `64Mi` of memory and `250m` CPU (use resource requests).\n - The container should be limited to `128Mi` of memory and `500m` CPU (use resource limits).\n - The container needs access to a database password in order to authenticate with a backend database server. The password is `0penSh1ftRul3s!`. It should be stored as a Kubernetes secret called `yoda-db-password` and passed to the container as an *environment variable* called `DB_PASSWORD`.\n - The container will need to access the Kubernetes API using the ServiceAccount `yoda-svc`. Create the service account if it doesn't already exist, and configure the pod to use it.\n\n## Verification\n\nTo verify your setup is complete, check `/etc/yoda-service` for the `yoda.cfg` file and use the `cat` command to check it's contents.\n\n```\nkubectl exec -it yoda-service /bin/bash\ncd /etc/yoda-service\ncat yoda.cfg\n```","type":"Mdx","contentDigest":"b25d67bc2da37fd5466939eff86ccd51","counter":809,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Kubernetes Lab 2 - Pod Configuration"},"exports":{},"rawBody":"---\ntitle: Kubernetes Lab 2 - Pod Configuration\n---\n\n## Problem\n\n- Create a pod definition named `yoda-service-pod.yml`, and then create a pod in the cluster using this definition to make sure it works.\n\nThe specifications are as follows:\n\n - The current image for the container is `bitnami/nginx`. You do not need a custom command or args.\n - There is some configuration data the container will need:\n    - `yoda.baby.power=100000000`\n    - `yoda.strength=10`\n - It will expect to find this data in a file at `/etc/yoda-service/yoda.cfg`. Store the configuration data in a ConfigMap called `yoda-service-config` and provide it to the container as a mounted volume.\n - The container should expect to use `64Mi` of memory and `250m` CPU (use resource requests).\n - The container should be limited to `128Mi` of memory and `500m` CPU (use resource limits).\n - The container needs access to a database password in order to authenticate with a backend database server. The password is `0penSh1ftRul3s!`. It should be stored as a Kubernetes secret called `yoda-db-password` and passed to the container as an *environment variable* called `DB_PASSWORD`.\n - The container will need to access the Kubernetes API using the ServiceAccount `yoda-svc`. Create the service account if it doesn't already exist, and configure the pod to use it.\n\n## Verification\n\nTo verify your setup is complete, check `/etc/yoda-service` for the `yoda.cfg` file and use the `cat` command to check it's contents.\n\n```\nkubectl exec -it yoda-service /bin/bash\ncd /etc/yoda-service\ncat yoda.cfg\n```","fileAbsolutePath":"/Users/vishal/Cloud2020/CNTK/ibm-gsi-cloudnative-journey/src/pages/developer-foundation/activities/labs/lab2/index.mdx"}}}}