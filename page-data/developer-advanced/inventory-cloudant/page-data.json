{"componentChunkName":"component---src-pages-developer-advanced-inventory-cloudant-index-mdx","path":"/developer-advanced/inventory-cloudant/","result":{"pageContext":{"frontmatter":{"title":"Cloudant Integration"},"relativePagePath":"/developer-advanced/inventory-cloudant/index.mdx","titleType":"page","MdxNode":{"id":"0bd2fafc-1dff-5b8c-b3af-fa81f455b4f6","children":[],"parent":"443ad71f-b37b-59a6-ac55-ca7ba3079560","internal":{"content":"---\ntitle: Cloudant Integration\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nAdd a Cloudant integration to your backend service\n\n</PageDescription>\n\n- While logged into the IBM Cloud account use the resource list to find your pre installed Cloudant database instance name after your development cluster.\n\n- Open the database instance dashboard.\n\n- Click on the Service Credentials on the left-hand menu.\n\n- You will see the credentials for the database.\n\n- Open a terminal window folder/directory called `data`\n    ```bash\n    mkdir data\n    ```\n\n- To help create test JSON data we are going to supply a template to the JSON Generator tool, this helps when creating dummy data for testing. Navigate to the following link [https://www.json-generator.com/](https://www.json-generator.com/)\n\n- Replace the default template with the following template (using cut and paste). This will enable a 100 records of test data to be created to represent a products database. Click on the *Generate* button.\n    ```bash\n    [\n      '{{repeat(1, 50)}}',\n      {\n        id: '{{objectId()}}',\n        manufacturer: '{{company().toUpperCase()}}',\n        name:  '{{lorem(3, \"words\")}}',\n        price: '{{floating(10, 1000, 2, \"0.00\")}}',\n        stock: '{{integer(1, 100)}}'\n      }\n    ]\n    ```\n- Copy the generated contents on the right hand side into a file called `inventory.json` and save it into the same folder. Wrap the array with a docs statement.\n    ```json\n    {\n      \"docs\": <Add Generated array here>\n    }\n    ```\n- Save the documents that will be loaded into Cloudant\n\n- Download the `dataload.sh` script from the Iteration Zero repository - https://raw.githubusercontent.com/ibm-garage-cloud/ibm-garage-iteration-zero/master/terraform/scripts/dataload.sh\n\n- Add the `username` and `apikey` to `CLOUDANT_USERNAME` and `CLOUDANT_API_KEY` variables in the `dataload.sh` script.\nYou can get the credentials from the Cloudant credentials view in the IBM Cloud console.\n- Add `DATABASE` value to be `inventory-<replace with namespace>` using the dev namespace/project name you have been using.\n- Save the script, make it executable, and then run it by passing in the filename\n    ```bash\n    chmod +x ./dataload.sh\n    ./dataload.sh inventory.json\n    ```\n- The data from the `inventory.json` file will then be used to populate the database, to confirm this on the Dashboard click on Manage menu on the left and then Launch button to see the Cloudant dashboard.\n- Click on the Left icon that looks like a Database and you will see the `inventory-<namespace>` database created.\n- Click on the `inventory` database, then click **Table** view.\n- You can see the rows of data\n    ![Database](/images/database.png)\n\n- If you click on a row of data, you will see the raw NoSQL form of the data record.\n- This completes the setup of the database and populating it with data.\n\n### Enable database in the solution\n\nIf you are starting from the solution, use the following steps to enable the Cloudant database\n\n#### Set up local development\n\n- Open the mappings.json file under src/main/resources and add a `DATABASE_NAME` value with the value `inventory-{namespace}` where `namespace` is the namespace where the pipeline is running (e.g. dev-{initials})\n    ```json path=src/main/resources/mappings.json\n    {\n      \"DATABASE_NAME\": \"inventory-{namespace}\"\n    }\n    ```\n\n- Log into cloud.ibm.com and open the Cloudant service from the resource list\n\n- Click on service credentials and expand the listed credentials\n\n- Copy the json contents from the credentials into `mappings.json` under the `CLOUDANT_CONFIG` object (note that CLOUDANT_CONFIG value must be a string type not a json type, so you must use escaping characters for this value)\n    ```json path=src/main/resources/mappings.json\n    {\n      \"DATABASE_NAME\": \"inventory-{namespace}\",\n      \"CLOUDANT_CONFIG\": \"{paste json here}\"\n    }\n    ```\n\n#### Activate the Clouant service implementation\n\n- Open `src/main/java/com/ibm/inventory_management/services/StockItemMockService.java` and remove the `@Profile(\"mock\")` annotation\n\n- Open `src/main/java/com/ibm/inventory_management/services/StockItemService.java` and add the `@Primary` annotation. The file should look like the following\n    ```java path=src/main/java/com/ibm/inventory_management/services/StockItemService.java\n    package com.ibm.inventory_management.services;\n    import org.springframework.context.annotation.Primary;\n    import org.springframework.context.annotation.Profile;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.Lazy;\n    ...\n    @Service\n    @Primary\n    public class StockItemService implements StockItemApi {\n    @Bean\n    public static CloudantClient buildCloudant(CloudantConfig config) throws CloudServicesException {\n        System.out.println(\"Config: \" + config);\n        URL url = null;\n        try {\n            url = new URL(config.getUrl());\n        } catch (MalformedURLException e) {\n            throw new CloudServicesException(\"Invalid service URL specified\", e);\n        }\n       return ClientBuilder\n                .url(url)\n                .iamApiKey(config.getApikey())\n                //.username(config.getUsername())\n                //.password(config.getPassword())\n                .build();\n    }\n    private CloudantConfig config;\n    private CloudantClient client;\n    private Database db = null;\n    public StockItemService(CloudantConfig config, @Lazy CloudantClient client) {\n        this.config = config;\n        this.client = client;\n    }\n    @PostConstruct\n    public void init() {\n        db = client.database(config.getDatabaseName(), true);\n    }\n    @Override\n    ...\n    }\n    ```\n\n\n\n#### Update the configuration values in the `values.yaml` helm chart\n\n- Open the `values.yaml` file and update the values for `cloudantBinding` and `databaseName`\n    ```yaml path=chart/template-java-spring/values.yaml\n    cloudantBinding=\"{binding name}\"\n    databaseName=\"inventory-{namespace}\"\n    ```\n\n    **Note:** The cloudantBinding value should match the name of the cloudant binding secret\n\n### Add a Cloudant integration to your backend service\n\nIf you are following the instructions from MicroApp part 1 and want to enable the Cloudant database\nyourself, use the following directions.\n\n#### Update the gradle config to include cloudant dependencies\n\n- Enable the cloudant libraries by applying the `build-cloudant.gradle` to the end of the\nbuild.gradle file\n\n```groovy path=build.gradle\napply from:   'gradle/build-cloudant.gradle'\n```\n\n- Run `./gradlew init` to validate the changes and load the libraries\n\n#### Configuration values\n\n- CloudantConfig is added to hold the url, username, password, and databaseName values\n\n- In CloudantMapping,logic is implemented to load the configuration from the secret binding or local file .\n\n#### Set up local development\n\n- Open the mappings.json file under src/main/resources and add a `DATABASE_NAME` value with the value\n`inventory-{namespace}` where `namespace` is the namespace where the pipeline is running (e.g. dev-{initials})\n\n```json path=src/main/resources/mappings.json\n{\n  \"DATABASE_NAME\": \"inventory-{namespace}\"\n}\n```\n\n- Log into cloud.ibm.com and open the Cloudant service from the resource list\n\n- Click on service credentials and expand the listed credentials\n\n- Copy the json contents from the credentials into `mappings.json` under the `CLOUDANT_CONFIG` object\n\n```json path=src/main/resources/mappings.json\n{\n  \"DATABASE_NAME\": \"inventory-{namespace}\",\n  \"CLOUDANT_CONFIG\": \"{paste json here}\"\n}\n```\n#### Service Implementation\n\n- CloudantApi component is added to create the CloudantClient instance from the configuration\n\n- Open the `deployment.yaml` file and add environment variables that use those values to the top of the\nexisting `env` block\n\n```yaml path=chart/template-java-spring/templates/deployment.yaml\n          env:\n            - name: CLOUDANT_CONFIG\n              valueFrom:\n                secretKeyRef:\n                  name: {{ .Values.cloudantBinding | quote }}\n                  key: binding\n            - name: DATABASE_NAME\n              value: {{ .Values.databaseName | quote }}\n```\n","type":"Mdx","contentDigest":"039dc39295f7b20567227f28506be0c7","counter":819,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Cloudant Integration"},"exports":{},"rawBody":"---\ntitle: Cloudant Integration\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nAdd a Cloudant integration to your backend service\n\n</PageDescription>\n\n- While logged into the IBM Cloud account use the resource list to find your pre installed Cloudant database instance name after your development cluster.\n\n- Open the database instance dashboard.\n\n- Click on the Service Credentials on the left-hand menu.\n\n- You will see the credentials for the database.\n\n- Open a terminal window folder/directory called `data`\n    ```bash\n    mkdir data\n    ```\n\n- To help create test JSON data we are going to supply a template to the JSON Generator tool, this helps when creating dummy data for testing. Navigate to the following link [https://www.json-generator.com/](https://www.json-generator.com/)\n\n- Replace the default template with the following template (using cut and paste). This will enable a 100 records of test data to be created to represent a products database. Click on the *Generate* button.\n    ```bash\n    [\n      '{{repeat(1, 50)}}',\n      {\n        id: '{{objectId()}}',\n        manufacturer: '{{company().toUpperCase()}}',\n        name:  '{{lorem(3, \"words\")}}',\n        price: '{{floating(10, 1000, 2, \"0.00\")}}',\n        stock: '{{integer(1, 100)}}'\n      }\n    ]\n    ```\n- Copy the generated contents on the right hand side into a file called `inventory.json` and save it into the same folder. Wrap the array with a docs statement.\n    ```json\n    {\n      \"docs\": <Add Generated array here>\n    }\n    ```\n- Save the documents that will be loaded into Cloudant\n\n- Download the `dataload.sh` script from the Iteration Zero repository - https://raw.githubusercontent.com/ibm-garage-cloud/ibm-garage-iteration-zero/master/terraform/scripts/dataload.sh\n\n- Add the `username` and `apikey` to `CLOUDANT_USERNAME` and `CLOUDANT_API_KEY` variables in the `dataload.sh` script.\nYou can get the credentials from the Cloudant credentials view in the IBM Cloud console.\n- Add `DATABASE` value to be `inventory-<replace with namespace>` using the dev namespace/project name you have been using.\n- Save the script, make it executable, and then run it by passing in the filename\n    ```bash\n    chmod +x ./dataload.sh\n    ./dataload.sh inventory.json\n    ```\n- The data from the `inventory.json` file will then be used to populate the database, to confirm this on the Dashboard click on Manage menu on the left and then Launch button to see the Cloudant dashboard.\n- Click on the Left icon that looks like a Database and you will see the `inventory-<namespace>` database created.\n- Click on the `inventory` database, then click **Table** view.\n- You can see the rows of data\n    ![Database](/images/database.png)\n\n- If you click on a row of data, you will see the raw NoSQL form of the data record.\n- This completes the setup of the database and populating it with data.\n\n### Enable database in the solution\n\nIf you are starting from the solution, use the following steps to enable the Cloudant database\n\n#### Set up local development\n\n- Open the mappings.json file under src/main/resources and add a `DATABASE_NAME` value with the value `inventory-{namespace}` where `namespace` is the namespace where the pipeline is running (e.g. dev-{initials})\n    ```json path=src/main/resources/mappings.json\n    {\n      \"DATABASE_NAME\": \"inventory-{namespace}\"\n    }\n    ```\n\n- Log into cloud.ibm.com and open the Cloudant service from the resource list\n\n- Click on service credentials and expand the listed credentials\n\n- Copy the json contents from the credentials into `mappings.json` under the `CLOUDANT_CONFIG` object (note that CLOUDANT_CONFIG value must be a string type not a json type, so you must use escaping characters for this value)\n    ```json path=src/main/resources/mappings.json\n    {\n      \"DATABASE_NAME\": \"inventory-{namespace}\",\n      \"CLOUDANT_CONFIG\": \"{paste json here}\"\n    }\n    ```\n\n#### Activate the Clouant service implementation\n\n- Open `src/main/java/com/ibm/inventory_management/services/StockItemMockService.java` and remove the `@Profile(\"mock\")` annotation\n\n- Open `src/main/java/com/ibm/inventory_management/services/StockItemService.java` and add the `@Primary` annotation. The file should look like the following\n    ```java path=src/main/java/com/ibm/inventory_management/services/StockItemService.java\n    package com.ibm.inventory_management.services;\n    import org.springframework.context.annotation.Primary;\n    import org.springframework.context.annotation.Profile;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.Lazy;\n    ...\n    @Service\n    @Primary\n    public class StockItemService implements StockItemApi {\n    @Bean\n    public static CloudantClient buildCloudant(CloudantConfig config) throws CloudServicesException {\n        System.out.println(\"Config: \" + config);\n        URL url = null;\n        try {\n            url = new URL(config.getUrl());\n        } catch (MalformedURLException e) {\n            throw new CloudServicesException(\"Invalid service URL specified\", e);\n        }\n       return ClientBuilder\n                .url(url)\n                .iamApiKey(config.getApikey())\n                //.username(config.getUsername())\n                //.password(config.getPassword())\n                .build();\n    }\n    private CloudantConfig config;\n    private CloudantClient client;\n    private Database db = null;\n    public StockItemService(CloudantConfig config, @Lazy CloudantClient client) {\n        this.config = config;\n        this.client = client;\n    }\n    @PostConstruct\n    public void init() {\n        db = client.database(config.getDatabaseName(), true);\n    }\n    @Override\n    ...\n    }\n    ```\n\n\n\n#### Update the configuration values in the `values.yaml` helm chart\n\n- Open the `values.yaml` file and update the values for `cloudantBinding` and `databaseName`\n    ```yaml path=chart/template-java-spring/values.yaml\n    cloudantBinding=\"{binding name}\"\n    databaseName=\"inventory-{namespace}\"\n    ```\n\n    **Note:** The cloudantBinding value should match the name of the cloudant binding secret\n\n### Add a Cloudant integration to your backend service\n\nIf you are following the instructions from MicroApp part 1 and want to enable the Cloudant database\nyourself, use the following directions.\n\n#### Update the gradle config to include cloudant dependencies\n\n- Enable the cloudant libraries by applying the `build-cloudant.gradle` to the end of the\nbuild.gradle file\n\n```groovy path=build.gradle\napply from:   'gradle/build-cloudant.gradle'\n```\n\n- Run `./gradlew init` to validate the changes and load the libraries\n\n#### Configuration values\n\n- CloudantConfig is added to hold the url, username, password, and databaseName values\n\n- In CloudantMapping,logic is implemented to load the configuration from the secret binding or local file .\n\n#### Set up local development\n\n- Open the mappings.json file under src/main/resources and add a `DATABASE_NAME` value with the value\n`inventory-{namespace}` where `namespace` is the namespace where the pipeline is running (e.g. dev-{initials})\n\n```json path=src/main/resources/mappings.json\n{\n  \"DATABASE_NAME\": \"inventory-{namespace}\"\n}\n```\n\n- Log into cloud.ibm.com and open the Cloudant service from the resource list\n\n- Click on service credentials and expand the listed credentials\n\n- Copy the json contents from the credentials into `mappings.json` under the `CLOUDANT_CONFIG` object\n\n```json path=src/main/resources/mappings.json\n{\n  \"DATABASE_NAME\": \"inventory-{namespace}\",\n  \"CLOUDANT_CONFIG\": \"{paste json here}\"\n}\n```\n#### Service Implementation\n\n- CloudantApi component is added to create the CloudantClient instance from the configuration\n\n- Open the `deployment.yaml` file and add environment variables that use those values to the top of the\nexisting `env` block\n\n```yaml path=chart/template-java-spring/templates/deployment.yaml\n          env:\n            - name: CLOUDANT_CONFIG\n              valueFrom:\n                secretKeyRef:\n                  name: {{ .Values.cloudantBinding | quote }}\n                  key: binding\n            - name: DATABASE_NAME\n              value: {{ .Values.databaseName | quote }}\n```\n","fileAbsolutePath":"/Users/vishal/Cloud2020/CNTK/ibm-gsi-cloudnative-journey/src/pages/developer-advanced/inventory-cloudant/index.mdx"}}}}